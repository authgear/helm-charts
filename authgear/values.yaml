authgear:
  appNamespace: "authgear-apps"

  databaseURL: postgres://localhost
  databaseSchema: public

  redisURL: redis://localhost
  redisAutoRewriteAOFCronjob:
    enabled: false
    schedule: "0 3 * * *"
    image: redis:6
    command:
    - "sh"
    - "-c"
    - "redis-cli -u $REDIS_URL BGREWRITEAOF"
    args: []
    resources:
      requests:
        cpu: 100m
        memory: 32Mi
      limits:
        cpu: 200m
        memory: 64Mi

  saml:
    # The default is "urn:{{.app_id}}.localhost"
    idpEntityIDTemplate: ""

  stripe:
    secretKey: ""
    webhookSigningKey: ""
    cronjob:
      enabled: false
      # Stripe cronjob runs after usage record cronjob.
      schedule: "0 3 * * *"

  usageRecord:
    whatsapp:
      # whatsapp-sent or whatsapp-otp-verified
      event: "whatsapp-sent"
    cronjob:
      enabled: false
      schedule: "0 2 * * *"

  configSourceType: "database"
  trustProxy: "true"
  logLevel: "info"
  sentryDSN: ""
  uiSentryDSN: ""
  portalSentryDSN: ""

  ingress:
    enabled: true
    class: nginx
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 10m

  certManager:
    enabled: true
    issuer:
      dns01:
        name: __replace_me__
        kind: Issuer
        group: cert-manager.io
      http01:
        name: __replace_me__
        kind: Issuer
        group: cert-manager.io

  tls:
    portal:
      ingress:
        enabled: true
        tls:
          enabled: true
        annotations: {}
      certManager:
        enabled: true
      secretname: ""
    portalAuthgear:
      ingress:
        enabled: true
        tls:
          enabled: true
        annotations: {}
      certManager:
        enabled: true
      secretName: ""

  defaultDomain: ""
  allDefaultDomains: []
  #- domain: ""
  #  ingress:
  #    enabled: true
  #    tls:
  #      enabled: true
  #    annotations: {}
  #  certManager:
  #    enabled: true
  #    issuer:
  #     name: __replace_me__
  #     kind: Issuer
  #     group: cert-manager.io
  #  secretName: ""

  smtp:
    host: __replace_me__
    port: 587
    mode: normal
    username: ""
    password: ""

  elasticsearch:
    enabled: false
    url: http://localhost:9200

  postgresqlsearch:
    enabled: false
    databaseURL: postgres://localhost
    databaseSchema: public

  twilio:
    accountSID: ""
    authToken: ""
    messageServiceID: ""

  nexmo:
    apiKey: ""
    apiSecret: ""

  whatsappWATI:
    enabled: false
    whatsappPhoneNumber: ""
    webhookAuth: ""

  whatsappOnPremises:
    enabled: false
    apiEndpoint: ""
    username: ""
    password: ""
    authenticationTemplate:
      name: ""
      type: authentication
      namespace: ""
      languages:
      - en

  whatsappCloudAPI:
    enabled: false
    phoneNumberID: ""
    accessToken: ""
    authenticationTemplate:
      type: ""
      copyCodeButton:
        name: ""
        languages: []
    webhook:
      verifyToken: ""
      appSecret: ""

  auditLog:
    enabled: false
    cronjob:
      enabled: false
      schedule: "0 0 * * *"
    databaseURL: postgres://localhost
    databaseSchema: public

  analytic:
    enabled: false
    redisURL: __replace_me__
    epoch: ""
    cronjob:
      hourlySchedule: "30 * * * *"
      weeklySchedule: "0 1 * * 1"
      monthlySchedule: "10 1 1 * *"
      dailySchedule: "20 1 * * *"

    posthog:
      endpoint: ""
      apiKey: ""
      cronjob:
        enabled: false
        schedule: "0 4 * * *"

    googleSpreadsheet:
      enabled: false
      id: ""
      range:
        userWeeklyReport: ""
        projectHourlyReport: ""
        projectWeeklyReport: ""
        projectMonthlyReport: ""
      secret:
        mountPath: ""
        volume: {}

  userexport:
    objectStore:
      type: ""
      awsS3:
        region: ""
        bucketName: ""
        accessKeyID: ""
        secretAccessKey: ""
      gcpGCS:
        # This is a new feature, so it does not suppport service account key.
        bucketName: ""
        serviceAccount: ""
      azureBlobStorage:
        storageAccount: ""
        container: ""
        accessKey: ""
      alibabaCloudOSS:
        bucketName: ""
        region: ""
        accessKeyID: ""
        secretAccessKey: ""

  mainServer:
    image: __replace_me__
    replicas: 1
    serviceAccount:
      annotations: {}
    env: {}
    nodeSelector: {}
    nodeName: ""
    affinity: {}
    tolerations: []
    topologySpreadConstraints: []
    resources:
      requests:
        cpu: 100m
        memory: 64Mi
      limits:
        cpu: 500m
        memory: 256Mi
    livenessProbe:
      httpGet:
        path: /healthz
        port: http
    readinessProbe:
      httpGet:
        path: /healthz
        port: http
    pdb:
      enabled: false
      minAvailable: ""
      maxUnavailable: ""
      unhealthyPodEvictionPolicy: ""
    hpa:
      enabled: false
      maxReplicas: 1
      metrics:
      - resource:
          name: cpu
          target:
            averageUtilization: 1000
            type: Utilization
        type: Resource

  adminServer:
    replicas: 1
    nodeSelector: {}
    nodeName: ""
    affinity: {}
    tolerations: []
    topologySpreadConstraints: []
    resources:
      requests:
        cpu: 100m
        memory: 32Mi
      limits:
        cpu: 500m
        memory: 256Mi
    livenessProbe:
      httpGet:
        path: /healthz
        port: http
    readinessProbe:
      httpGet:
        path: /healthz
        port: http
    pdb:
      enabled: false
      minAvailable: ""
      maxUnavailable: ""
      unhealthyPodEvictionPolicy: ""
    hpa:
      enabled: false
      maxReplicas: 1
      metrics:
      - resource:
          name: cpu
          target:
            averageUtilization: 1000
            type: Utilization
        type: Resource

  resolverServer:
    replicas: 1
    nodeSelector: {}
    nodeName: ""
    affinity: {}
    tolerations: []
    topologySpreadConstraints: []
    resources:
      requests:
        cpu: 100m
        memory: 32Mi
      limits:
        cpu: 500m
        memory: 256Mi
    livenessProbe:
      httpGet:
        path: /healthz
        port: http
    readinessProbe:
      httpGet:
        path: /healthz
        port: http
    pdb:
      enabled: false
      minAvailable: ""
      maxUnavailable: ""
      unhealthyPodEvictionPolicy: ""
    hpa:
      enabled: false
      maxReplicas: 1
      metrics:
      - resource:
          name: cpu
          target:
            averageUtilization: 1000
            type: Utilization
        type: Resource

  background:
    replicas: 1
    nodeSelector: {}
    nodeName: ""
    affinity: {}
    tolerations: []
    topologySpreadConstraints: []
    resources:
      requests:
        cpu: 100m
        memory: 32Mi
      limits:
        cpu: 300m
        memory: 64Mi

  imagesServer:
    replicas: 1
    cdn:
      host: ""
      hosts: []
    objectStore:
      type: ""
      awsS3:
        region: ""
        bucketName: ""
        accessKeyID: ""
        secretAccessKey: ""
      gcpGCS:
        bucketName: ""
        serviceAccount: ""
        credentialsJSONContent: ""
      azureBlobStorage:
        storageAccount: ""
        container: ""
        accessKey: ""
      alibabaCloudOSS:
        bucketName: ""
        region: ""
        accessKeyID: ""
        secretAccessKey: ""

    serviceAccountName: ""
    nodeSelector: {}
    nodeName: ""
    affinity: {}
    tolerations: []
    topologySpreadConstraints: []
    resources:
      requests:
        cpu: 500m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1Gi
    livenessProbe:
      httpGet:
        path: /healthz
        port: http
    readinessProbe:
      httpGet:
        path: /healthz
        port: http
    pdb:
      enabled: false
      minAvailable: ""
      maxUnavailable: ""
      unhealthyPodEvictionPolicy: ""
    hpa:
      enabled: false
      maxReplicas: 1
      metrics:
      - resource:
          name: cpu
          target:
            averageUtilization: 200
            type: Utilization
        type: Resource

  portalServerProxy:
    image: nginx:1.18

  portalServer:
    image: __replace_me__
    replicas: 1

    host: ""

    email:
      sender: ""
      replyTo: ""

    authgear:
      appID: __replace_me__
      clientID: __replace_me__
      endpoint: https://__replace_me__.example.com
      # Consider changing the default to refresh_token in the next major version.
      # cookie or refresh_token
      webSDKSessionType: cookie

    adminAPI:
      endpoint: http://cluster.local

    customDomain:
      enabled: true

    env: {}

    nodeSelector: {}
    nodeName: ""
    affinity: {}
    tolerations: []
    topologySpreadConstraints: []
    resources:
      requests:
        cpu: 100m
        memory: 64Mi
      limits:
        cpu: 500m
        memory: 256Mi
    livenessProbe:
      httpGet:
        path: /healthz
        port: portal
    readinessProbe:
      httpGet:
        path: /healthz
        port: portal
    pdb:
      enabled: false
      minAvailable: ""
      maxUnavailable: ""
      unhealthyPodEvictionPolicy: ""
    hpa:
      enabled: false
      maxReplicas: 1
      metrics:
      - resource:
          name: cpu
          target:
            averageUtilization: 1000
            type: Utilization
        type: Resource

  deno:
    image: __replace_me__
    replicas: 1
    nodeSelector: {}
    nodeName: ""
    affinity: {}
    tolerations: []
    topologySpreadConstraints: []
    resources:
      requests:
        cpu: 100m
        memory: 64Mi
      limits:
        cpu: 500m
        memory: 256Mi
    pdb:
      enabled: false
      minAvailable: ""
      maxUnavailable: ""
      unhealthyPodEvictionPolicy: ""
    hpa:
      enabled: false
      maxReplicas: 1
      metrics:
      - resource:
          name: cpu
          target:
            averageUtilization: 1000
            type: Utilization
        type: Resource

  appCustomResources:
    path: ""
    volume: {}

  portalCustomResources:
    path: ""
    volume: {}

  extraVolumes: []

  extraVolumeMounts: []

  oauthDemoSecrets:
    enabled: false
    items: []
